class e{constructor(e){this.element=e}applyWidthPercentage(e,t){this.element.style.width=`${e}%`}}function t(e,t){const n=e-t.panes[0].element.getBoundingClientRect().left;return Math.max(0,Math.min(n,t.getSize()))}class n{constructor(e,t,n,s,i){const o=document.createElement("div");o.className="elastic-resizer",o.style.width=`${i}px`,o.style.minWidth=`${i}px`,o.style.cursor="col-resize",this.layout=e,this.parentElement=t,this.panes=[n,s],this.splitPercentage=0,this.resizerElement=o,this.resizerWidth=i}apply(){this.parentElement.insertBefore(this.resizerElement,this.panes[1].element),this.addDragHandler()}addDragHandler(){let e,n;const s=s=>{console.log("drag move");const i=this.layout.getSize();console.log(`parent: ${i}`);let o=this.getSize();console.log(`split: ${o}`);const r=o/i;console.log(`split ratio: ${r}`);const l=t(s.clientX,this)-e;console.log(l),console.log(n);const c=n+l;console.log(c);const h=c-this.resizerWidth/2,a=o-h;console.log(h),console.log(a);const d=100*(h/o*r),p=100*(a/o*r);console.log(`first percentage: ${d}`),console.log(`second percentage: ${p}`),this.panes[0].applyWidthPercentage(d,this.resizerWidth),this.panes[1].applyWidthPercentage(p,this.resizerWidth)},i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};this.resizerElement.addEventListener("mousedown",(o=>{e=t(o.clientX,this);const r=this.resizerElement.getBoundingClientRect();console.log(r),n=t(r.left+r.width/2,this),document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}))}getSize(){const e=this.panes[0].element.getBoundingClientRect(),t=this.panes[1].element.getBoundingClientRect();return e.width+t.width}}class s{constructor(e,t){if(e.length<2)throw new Error("At least 2 panes must be provided");const s=e[0].element.parentElement;if(null===s)throw new Error("Cannot find element parent");for(let t of e)if(t.element.parentElement!==s)throw new Error("Elements have different parents");const i=[];for(let o=0;o<e.length;o++){if(0===o)continue;const r=new n(this,s,e[o-1],e[o],t.resizerWidth);i.push(r)}this.panes=e,this.splits=i,this.parentElement=s,this.resizerWidth=t.resizerWidth}getSize(){let e=0;for(const t of this.panes)e+=t.element.getBoundingClientRect().width;return e}apply(){for(const e of this.splits)e.apply();for(const e of this.panes)e.applyWidthPercentage(100/this.panes.length,this.resizerWidth)}}export{s as ElasticLayout,e as ElasticPane};
